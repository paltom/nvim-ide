Execute (Setup):
  set cmdheight=2

Given (Buffer with two lines):
  Line 1
  Line 2

Do (Go to the next item in list):
  :call setqflist([], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 1}, {'bufnr': bufnr(), 'lnum': 2}]})\<cr>
  ]s

Then (Cursor is positioned in the second line):
  AssertEqual 2, getcurpos()[1]

Do (Go to the previous item in list):
  :call setqflist([], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 1}, {'bufnr': bufnr(), 'lnum': 2}]})\<cr>
  :silent clast\<cr>
  [s

Then (Cursor is positioned in the first line):
  AssertEqual 1, getcurpos()[1]

Execute (Clear quickfix list):
  call setqflist([], ' ', {'items': []})

Do (Populate location list and go to next item):
  :call setloclist(0, [], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 1}, {'bufnr': bufnr(), 'lnum': 2}]})\<cr>
  ]s

Then (Cursor is in the second line):
  AssertEqual 2, getcurpos()[1]

Do (Populate location list and go to previous item):
  :call setloclist(0, [], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 1}, {'bufnr': bufnr(), 'lnum': 2}]})\<cr>
  :silent llast\<cr>
  [s

Then (Cursor is in the first line):
  AssertEqual 1, getcurpos()[1]

Do (Populate both quickfix and location list and go to the next search item):
  :call setqflist([], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 2}, {'bufnr': bufnr(), 'lnum': 1}]})\<cr>
  :call setloclist(0, [], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 1}, {'bufnr': bufnr(), 'lnum': 2}]})\<cr>
  ]s

Then (Cursor is in the second line (location list)):
  AssertEqual 2, getcurpos()[1]

Do (Populate both quickfix and location list and go to the next search item):
  :call setqflist([], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 2}, {'bufnr': bufnr(), 'lnum': 1}]})\<cr>
  :call setloclist(0, [], ' ', {'items': [{'bufnr': bufnr(), 'lnum': 1}, {'bufnr': bufnr(), 'lnum': 2}]})\<cr>
  :silent llast\<cr>
  [s

Then (Cursor is in the first line (location list)):
  AssertEqual 1, getcurpos()[1]

Execute (Cleanup):
  set cmdheight=1
