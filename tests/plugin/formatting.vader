Given text (Some text in buffer):
  Line 1
  Line 2

Do (Indent first line):
  I\<tab>

Expect (First line is indented with 4 spaces):
      Line 1
  Line 2

Do (Shift line right):
  >>

Expect (Line is indented with 4 spaces):
      Line 1
  Line 2

Given text (Some text with indented line):
      Line 1
  Line 2

Do (Shift line left):
  <<

Expect (First line is not indented):
  Line 1
  Line 2

Given text (Text with line indented with different amount of spaces):
     Line 1
  Line 2

Do (Shift line right):
  >>

Expect (Line is indented with 4 spaces):
      Line 1
  Line 2

Do (Shift line left):
  <<

Expect (First line is not indented):
  Line 1
  Line 2

Given c (C code buffer):
  if (1) {

Do (Write body of if):
  o
  printf("true");\<cr>
  }

Expect (Text is autoindented):
  if (1) {
      printf("true");
  }

Given c (C code buffer):
  if (1) {
      printf("true");
  }

Do (Insert line before '}'):
  /}\<cr>O
  printf("return");

Expect (Code before '}' is indented):
  if (1) {
      printf("true");
      printf("return");
  }

Given (Text in buffer):
  Line 1

Do (Format with tab characters and write):
  :setlocal noexpandtab\<cr>
  I\<tab>\<esc>
  :setlocal expandtab\<cr>
  :doautocmd BufWrite\<cr>

Expect (Text is formatted with spaces):
      Line 1

Do (Add trailing spaces and tab characters and write):
  :let g:remove_trailing_whitespaces = 1\<cr>
  :setlocal noexpandtab\<cr>
  A\<space>\<tab>\<esc>
  :setlocal expandtab\<cr>
  :doautocmd BufWrite\<cr>

Expect (Trailing whitespaces are removed):
  Line 1

Do (Disable removing trailing spaces and write):
  :let g:remove_trailing_whitespaces = 0\<cr>
  A\<space>\<esc>
  :doautocmd BufWrite\<cr>
  :let g:remove_trailing_whitespaces = 1\<cr>
  Ax

Expect (Trailing whitespaces are not removed):
  Line 1 x

Given (Two lines of text in buffer):
  Line 1
  Line 2

Do (Insert empty lines before and after first line):
  gg0e
  2[\<space>
  3]\<space>

Then (Cursor position is maintained):
  AssertEqual [3, 4], getcurpos()[1:2]

Expect (Empty lines are inserted):


  Line 1



  Line 2

Do (Insert empty lines after last line):
  G0e
  2]\<space>
  Goxxx\<esc>``

Then (Cursor position is maintained):
  AssertEqual [2, 4], getcurpos()[1:2]

Expect (Empty lines are inserted):
  Line 1
  Line 2


  xxx
